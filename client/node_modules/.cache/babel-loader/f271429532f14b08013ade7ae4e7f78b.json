{"ast":null,"code":"var _jsxFileName = \"/Users/mitchelleglon/Portfolio/movie-app/client/src/components/UserLikedMovies.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useEffect } from \"react\";\nimport { removeUserMovie } from \"../features/user/userSlice\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const updateUserMoviesDb = async userInfo => {\n  try {\n    const options = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"x-access-token\": userInfo.accessToken\n      },\n      body: JSON.stringify({\n        userInfo\n      })\n    };\n    const response = await fetch(`http://127.0.0.1:8080/api/update/userMovies`, options);\n    const data = await response.json();\n    console.log(data);\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nfunction UserLikedMovies() {\n  _s();\n\n  const dispatch = useDispatch();\n  const user = useSelector(store => store.user.user);\n  const movieIdArray = user.likedMovies;\n  const params = useParams();\n  const userId = params.id; //   console.log(user);\n\n  const [userMovieinfoArray, setUserMovieinfoArray] = useState([]);\n\n  const getLikedMoviesCall = async movieIdArray => {\n    const array = [];\n    await Promise.all(movieIdArray.map(async id => {\n      const response = await fetch(`https://api.themoviedb.org/3/movie/${id}?api_key=4503e42f5762f850ada999d307bfc5f9&language=en-US`);\n      const data = await response.json();\n      array.push(data);\n    }));\n    setUserMovieinfoArray(array);\n  };\n\n  const clickHandler = likedMovieId => {\n    dispatch(removeUserMovie(String(likedMovieId)));\n  };\n\n  useEffect(() => {\n    getLikedMoviesCall(movieIdArray);\n    updateUserMoviesDb(user);\n  }, [user]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"container-title\",\n      children: [user.username, \"s liked movies\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"movies-container\",\n      children: userMovieinfoArray.length > -1 && userMovieinfoArray.map(movie => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"movie-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: `https://image.tmdb.org/t/p/w500/${movie.poster_path}`,\n          alt: \"movie poster\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"movie-card-text-overlay\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: movie.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              clickHandler(movie.id);\n            },\n            children: \"Remove\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 15\n        }, this)]\n      }, movie.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n}\n\n_s(UserLikedMovies, \"b+YdwheESTWzLEO8LUKH+vVAyW0=\", false, function () {\n  return [useDispatch, useSelector, useParams];\n});\n\n_c = UserLikedMovies;\nexport default UserLikedMovies;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserLikedMovies\");","map":{"version":3,"names":["React","useState","useParams","useSelector","useDispatch","useEffect","removeUserMovie","updateUserMoviesDb","userInfo","options","method","headers","accessToken","body","JSON","stringify","response","fetch","data","json","console","log","err","UserLikedMovies","dispatch","user","store","movieIdArray","likedMovies","params","userId","id","userMovieinfoArray","setUserMovieinfoArray","getLikedMoviesCall","array","Promise","all","map","push","clickHandler","likedMovieId","String","username","length","movie","poster_path","title"],"sources":["/Users/mitchelleglon/Portfolio/movie-app/client/src/components/UserLikedMovies.jsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useEffect } from \"react\";\nimport { removeUserMovie } from \"../features/user/userSlice\";\n\nexport const updateUserMoviesDb = async (userInfo) => {\n  try {\n    const options = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"x-access-token\": userInfo.accessToken,\n      },\n      body: JSON.stringify({ userInfo }),\n    };\n\n    const response = await fetch(\n      `http://127.0.0.1:8080/api/update/userMovies`,\n      options\n    );\n    const data = await response.json();\n    console.log(data);\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nfunction UserLikedMovies() {\n  const dispatch = useDispatch();\n  const user = useSelector((store) => store.user.user);\n  const movieIdArray = user.likedMovies;\n  const params = useParams();\n  const userId = params.id;\n  //   console.log(user);\n  const [userMovieinfoArray, setUserMovieinfoArray] = useState([]);\n  const getLikedMoviesCall = async (movieIdArray) => {\n    const array = [];\n    await Promise.all(\n      movieIdArray.map(async (id) => {\n        const response = await fetch(\n          `https://api.themoviedb.org/3/movie/${id}?api_key=4503e42f5762f850ada999d307bfc5f9&language=en-US`\n        );\n        const data = await response.json();\n        array.push(data);\n      })\n    );\n    setUserMovieinfoArray(array);\n  };\n\n  const clickHandler = (likedMovieId) => {\n    dispatch(removeUserMovie(String(likedMovieId)));\n  };\n\n  useEffect(() => {\n    getLikedMoviesCall(movieIdArray);\n    updateUserMoviesDb(user);\n  }, [user]);\n\n  return (\n    <div>\n      <h3 className=\"container-title\">{user.username}s liked movies</h3>\n      <div className=\"movies-container\">\n        {userMovieinfoArray.length > -1 &&\n          userMovieinfoArray.map((movie) => (\n            <div className=\"movie-card\" key={movie.id}>\n              <img\n                src={`https://image.tmdb.org/t/p/w500/${movie.poster_path}`}\n                alt=\"movie poster\"\n              />\n              <div className=\"movie-card-text-overlay\">\n                <h4>{movie.title}</h4>\n                <button\n                  onClick={() => {\n                    clickHandler(movie.id);\n                  }}\n                >\n                  Remove\n                </button>\n              </div>\n            </div>\n          ))}\n      </div>\n    </div>\n  );\n}\n\nexport default UserLikedMovies;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}