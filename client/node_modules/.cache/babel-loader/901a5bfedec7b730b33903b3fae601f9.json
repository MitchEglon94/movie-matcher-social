{"ast":null,"code":"var _jsxFileName = \"/Users/mitchelleglon/Portfolio/movie-app/client/src/components/UserLikedShows.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useEffect } from \"react\";\nimport { removeUserShow } from \"../features/user/userSlice\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const updateUserShowsDb = async userInfo => {\n  try {\n    const options = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"x-access-token\": userInfo.accessToken\n      },\n      body: JSON.stringify({\n        userInfo\n      })\n    };\n    const response = await fetch(`http://127.0.0.1:8080/api/update/userShows`, options);\n    const data = await response.json();\n    console.log(data);\n  } catch (err) {}\n};\n\nfunction UserLikedShows() {\n  _s();\n\n  const dispatch = useDispatch();\n  const user = useSelector(store => store.user.user);\n  const showIdArray = user.likedTvShows;\n  const params = useParams();\n  const userId = params.id; //   console.log(user);\n\n  const [userShowinfoArray, setUserShowinfoArray] = useState([]);\n\n  const getLikedMoviesCall = async showIdArray => {\n    const array = [];\n    await Promise.all(showIdArray.map(async id => {\n      const response = await fetch(`https://api.themoviedb.org/3/tv/${id}?api_key=4503e42f5762f850ada999d307bfc5f9&language=en-US`);\n      const data = await response.json();\n      array.push(data);\n    }));\n    setUserShowinfoArray(array);\n  };\n\n  const clickHandler = likedShowId => {\n    dispatch(removeUserShow(String(likedShowId)));\n  };\n\n  useEffect(() => {\n    getLikedMoviesCall(showIdArray);\n    updateUserShowsDb(user);\n  }, [user]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"container-title\",\n      children: [user.username, \"s liked shows\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"movies-container\",\n      children: userShowinfoArray.length > -1 && userShowinfoArray.map(show => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"movie-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: `https://image.tmdb.org/t/p/w500/${show.poster_path}`,\n          alt: \"movie poster\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"movie-card-text-overlay\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: show.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              clickHandler(show.id);\n            },\n            children: \"Remove\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 15\n        }, this)]\n      }, show.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\n\n_s(UserLikedShows, \"QK36NrPdrn7YXaE5bFhtXR/9r4Y=\", false, function () {\n  return [useDispatch, useSelector, useParams];\n});\n\n_c = UserLikedShows;\nexport default UserLikedShows;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserLikedShows\");","map":{"version":3,"names":["React","useState","useParams","useSelector","useDispatch","useEffect","removeUserShow","updateUserShowsDb","userInfo","options","method","headers","accessToken","body","JSON","stringify","response","fetch","data","json","console","log","err","UserLikedShows","dispatch","user","store","showIdArray","likedTvShows","params","userId","id","userShowinfoArray","setUserShowinfoArray","getLikedMoviesCall","array","Promise","all","map","push","clickHandler","likedShowId","String","username","length","show","poster_path","title"],"sources":["/Users/mitchelleglon/Portfolio/movie-app/client/src/components/UserLikedShows.jsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useEffect } from \"react\";\nimport { removeUserShow } from \"../features/user/userSlice\";\n\nexport const updateUserShowsDb = async (userInfo) => {\n  try {\n    const options = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"x-access-token\": userInfo.accessToken,\n      },\n      body: JSON.stringify({ userInfo }),\n    };\n\n    const response = await fetch(\n      `http://127.0.0.1:8080/api/update/userShows`,\n      options\n    );\n    const data = await response.json();\n    console.log(data);\n  } catch (err) {}\n};\n\nfunction UserLikedShows() {\n  const dispatch = useDispatch();\n  const user = useSelector((store) => store.user.user);\n  const showIdArray = user.likedTvShows;\n  const params = useParams();\n  const userId = params.id;\n  //   console.log(user);\n  const [userShowinfoArray, setUserShowinfoArray] = useState([]);\n  const getLikedMoviesCall = async (showIdArray) => {\n    const array = [];\n    await Promise.all(\n      showIdArray.map(async (id) => {\n        const response = await fetch(\n          `https://api.themoviedb.org/3/tv/${id}?api_key=4503e42f5762f850ada999d307bfc5f9&language=en-US`\n        );\n        const data = await response.json();\n        array.push(data);\n      })\n    );\n    setUserShowinfoArray(array);\n  };\n\n  const clickHandler = (likedShowId) => {\n    dispatch(removeUserShow(String(likedShowId)));\n  };\n\n  useEffect(() => {\n    getLikedMoviesCall(showIdArray);\n    updateUserShowsDb(user);\n  }, [user]);\n\n  return (\n    <div>\n      <h3 className=\"container-title\">{user.username}s liked shows</h3>\n      <div className=\"movies-container\">\n        {userShowinfoArray.length > -1 &&\n          userShowinfoArray.map((show) => (\n            <div className=\"movie-card\" key={show.id}>\n              <img\n                src={`https://image.tmdb.org/t/p/w500/${show.poster_path}`}\n                alt=\"movie poster\"\n              />\n              <div className=\"movie-card-text-overlay\">\n                {/* <p>{movie.overview}</p> */}\n                <h4>{show.title}</h4>\n\n                <button\n                  onClick={() => {\n                    clickHandler(show.id);\n                  }}\n                >\n                  Remove\n                </button>\n\n                {/* <div className=\"movie-card-overlay-btns\">\n                <div>More</div>\n                <div\n                  onClick={() => {\n                    updateUserMoviesDb(user);\n                    clickHandler(String(movie.id), user);\n                  }}\n                >\n                  Like\n                </div>\n              </div> */}\n              </div>\n            </div>\n          ))}\n      </div>\n    </div>\n  );\n}\n\nexport default UserLikedShows;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}