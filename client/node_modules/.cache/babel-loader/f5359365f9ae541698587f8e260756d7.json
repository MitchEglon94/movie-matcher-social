{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  user: null,\n  message: \"\",\n  token: null,\n  status: \"idle\"\n};\nexport const login = createAsyncThunk(\"auth/fetchUser\", async creds => {\n  console.log(JSON.stringify(creds));\n  const options = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(creds)\n  };\n  const response = await fetch(\"http://127.0.0.1:8080/api/auth/signin\", options);\n  const data = await response.json();\n  console.log(data);\n  return data;\n});\nexport const signup = createAsyncThunk(\"auth/addUser\", async creds => {\n  console.log(JSON.stringify(creds));\n  const options = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(creds)\n  };\n  const response = await fetch(\"http://127.0.0.1:8080/api/auth/signup\", options);\n  const data = await response.json();\n  return data;\n});\nexport const userSlice = createSlice({\n  name: \"user\",\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    logout: state => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.user = null;\n      state.token = null;\n    },\n    updateMessage: state => {\n      state.message = \"\";\n    },\n    updateUserMovies: (state, action) => {\n      console.log(action.payload);\n\n      if (!state.user.likedMovies) {\n        state.user.likedMovies = [action.payload];\n      } else if (state.user.likedMovies.indexOf(action.payload) > -1) {\n        return;\n      } else {\n        state.user.likedMovies.push(action.payload);\n      }\n    },\n    updateUserShows: (state, action) => {\n      console.log(action.payload);\n\n      if (!state.user.likedTvShows) {\n        state.user.likedTvShows = [action.payload];\n      } else if (state.user.likedTvShows.indexOf(action.payload) > -1) {\n        return;\n      } else {\n        state.user.likedTvShows.push(action.payload);\n      }\n    },\n    removeUserMovie: (state, action) => {\n      console.log(action.payload);\n      state.user.likedMovies = state.user.likedMovies.filter(movie => movie !== action.payload);\n    }\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: builder => {\n    builder.addCase(login.pending, state => {\n      state.status = \"loading\";\n    }).addCase(login.fulfilled, (state, action) => {\n      state.status = \"idle\";\n      console.log(action.payload);\n\n      if (action.payload.accessToken) {\n        state.user = action.payload;\n      }\n    }).addCase(signup.pending, state => {\n      state.status = \"loading\";\n    }).addCase(signup.fulfilled, (state, action) => {\n      state.status = \"idle\"; // console.log(action.meta);\n\n      state.message = action.payload;\n    });\n  }\n});\nexport const {\n  logout,\n  updateMessage,\n  updateUserMovies,\n  updateUserShows\n} = userSlice.actions; // The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\n// export const selectCount = (state) => state.counter.value;\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\n// export const incrementIfOdd = (amount) => (dispatch, getState) => {\n//   const currentValue = selectCount(getState());\n//   if (currentValue % 2 === 1) {\n//     dispatch(incrementByAmount(amount));\n//   }\n// };\n\nexport default userSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","initialState","user","message","token","status","login","creds","console","log","JSON","stringify","options","method","headers","body","response","fetch","data","json","signup","userSlice","name","reducers","logout","state","updateMessage","updateUserMovies","action","payload","likedMovies","indexOf","push","updateUserShows","likedTvShows","removeUserMovie","filter","movie","extraReducers","builder","addCase","pending","fulfilled","accessToken","actions","reducer"],"sources":["/Users/mitchelleglon/Portfolio/movie-app/client/src/features/user/userSlice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n  user: null,\n  message: \"\",\n  token: null,\n  status: \"idle\",\n};\n\nexport const login = createAsyncThunk(\"auth/fetchUser\", async (creds) => {\n  console.log(JSON.stringify(creds));\n  const options = {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify(creds),\n  };\n  const response = await fetch(\n    \"http://127.0.0.1:8080/api/auth/signin\",\n    options\n  );\n  const data = await response.json();\n  console.log(data);\n  return data;\n});\n\nexport const signup = createAsyncThunk(\"auth/addUser\", async (creds) => {\n  console.log(JSON.stringify(creds));\n  const options = {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify(creds),\n  };\n  const response = await fetch(\n    \"http://127.0.0.1:8080/api/auth/signup\",\n    options\n  );\n  const data = await response.json();\n  return data;\n});\n\nexport const userSlice = createSlice({\n  name: \"user\",\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    logout: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.user = null;\n      state.token = null;\n    },\n    updateMessage: (state) => {\n      state.message = \"\";\n    },\n    updateUserMovies: (state, action) => {\n      console.log(action.payload);\n      if (!state.user.likedMovies) {\n        state.user.likedMovies = [action.payload];\n      } else if (state.user.likedMovies.indexOf(action.payload) > -1) {\n        return;\n      } else {\n        state.user.likedMovies.push(action.payload);\n      }\n    },\n    updateUserShows: (state, action) => {\n      console.log(action.payload);\n      if (!state.user.likedTvShows) {\n        state.user.likedTvShows = [action.payload];\n      } else if (state.user.likedTvShows.indexOf(action.payload) > -1) {\n        return;\n      } else {\n        state.user.likedTvShows.push(action.payload);\n      }\n    },\n    removeUserMovie: (state, action) => {\n      console.log(action.payload);\n      state.user.likedMovies = state.user.likedMovies.filter(\n        (movie) => movie !== action.payload\n      );\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(login.pending, (state) => {\n        state.status = \"loading\";\n      })\n      .addCase(login.fulfilled, (state, action) => {\n        state.status = \"idle\";\n        console.log(action.payload);\n        if (action.payload.accessToken) {\n          state.user = action.payload;\n        }\n      })\n      .addCase(signup.pending, (state) => {\n        state.status = \"loading\";\n      })\n      .addCase(signup.fulfilled, (state, action) => {\n        state.status = \"idle\";\n        // console.log(action.meta);\n        state.message = action.payload;\n      });\n  },\n});\n\nexport const { logout, updateMessage, updateUserMovies, updateUserShows } =\n  userSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\n// export const selectCount = (state) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\n// export const incrementIfOdd = (amount) => (dispatch, getState) => {\n//   const currentValue = selectCount(getState());\n//   if (currentValue % 2 === 1) {\n//     dispatch(incrementByAmount(amount));\n//   }\n// };\n\nexport default userSlice.reducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}