{"ast":null,"code":"var _jsxFileName = \"/Users/mitchelleglon/Portfolio/movie-app/client/src/components/PopularMovies.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { updateUserMovies } from \"../features/user/userSlice\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport ScrollDialog from \"./MovieModal\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const updateUserMoviesDb = async userInfo => {\n  // const userId = userInfo.id;\n  // console.log(userInfo.accessToken);\n  try {\n    const options = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"x-access-token\": userInfo.accessToken\n      },\n      body: JSON.stringify({\n        userInfo\n      })\n    };\n    const response = await fetch(`http://127.0.0.1:8080/api/update/userMovies`, options);\n    const data = await response.json();\n    console.log(data);\n  } catch (err) {}\n};\n\nfunction PopularMovies() {\n  _s();\n\n  const dispatch = useDispatch(); //   const MOVIE_ENDPOINT = process.env;\n\n  const [movies, setMovies] = useState([]);\n  const user = useSelector(store => store.user.user);\n\n  const getMovies = async () => {\n    let rand = Math.floor(Math.random() * 10 + 1);\n\n    try {\n      const response = await fetch(`https://api.themoviedb.org/3/movie/popular?api_key=4503e42f5762f850ada999d307bfc5f9&page=1`);\n      const data = await response.json();\n      console.log(data.results);\n      setMovies(data.results);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const clickHandler = (likedMovieId, currentUser) => {\n    dispatch(updateUserMovies(likedMovieId));\n  };\n\n  useEffect(() => {\n    getMovies();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"featured-movie-section\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Top Rated Movies\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"movies-container\",\n      children: movies && movies.map(movie => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"movie-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: `https://image.tmdb.org/t/p/w200/${movie.poster_path}`,\n          alt: \"movie poster\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"movie-card-text-overlay\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: movie.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"movie-card-overlay-btns\",\n            children: [/*#__PURE__*/_jsxDEV(ScrollDialog, {\n              item: movie,\n              user: user\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              onClick: () => {\n                updateUserMoviesDb(user);\n                clickHandler(String(movie.id), user);\n              },\n              children: \"Like\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 15\n        }, this)]\n      }, movie.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n}\n\n_s(PopularMovies, \"+i8n/HO/AGjqu4ltNTkMCe5Ovr8=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = PopularMovies;\nexport default PopularMovies;\n\nvar _c;\n\n$RefreshReg$(_c, \"PopularMovies\");","map":{"version":3,"names":["React","useEffect","useState","updateUserMovies","useSelector","useDispatch","ScrollDialog","updateUserMoviesDb","userInfo","options","method","headers","accessToken","body","JSON","stringify","response","fetch","data","json","console","log","err","PopularMovies","dispatch","movies","setMovies","user","store","getMovies","rand","Math","floor","random","results","clickHandler","likedMovieId","currentUser","map","movie","poster_path","title","String","id"],"sources":["/Users/mitchelleglon/Portfolio/movie-app/client/src/components/PopularMovies.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { updateUserMovies } from \"../features/user/userSlice\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport ScrollDialog from \"./MovieModal\";\n\nexport const updateUserMoviesDb = async (userInfo) => {\n  // const userId = userInfo.id;\n  // console.log(userInfo.accessToken);\n\n  try {\n    const options = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"x-access-token\": userInfo.accessToken,\n      },\n      body: JSON.stringify({ userInfo }),\n    };\n\n    const response = await fetch(\n      `http://127.0.0.1:8080/api/update/userMovies`,\n      options\n    );\n    const data = await response.json();\n    console.log(data);\n  } catch (err) {}\n};\n\nfunction PopularMovies() {\n  const dispatch = useDispatch();\n  //   const MOVIE_ENDPOINT = process.env;\n  const [movies, setMovies] = useState([]);\n  const user = useSelector((store) => store.user.user);\n\n  const getMovies = async () => {\n    let rand = Math.floor(Math.random() * 10 + 1);\n    try {\n      const response = await fetch(\n        `https://api.themoviedb.org/3/movie/popular?api_key=4503e42f5762f850ada999d307bfc5f9&page=1`\n      );\n      const data = await response.json();\n      console.log(data.results);\n      setMovies(data.results);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const clickHandler = (likedMovieId, currentUser) => {\n    dispatch(updateUserMovies(likedMovieId));\n  };\n  useEffect(() => {\n    getMovies();\n  }, []);\n\n  return (\n    <div className=\"featured-movie-section\">\n      <h2>Top Rated Movies</h2>\n      <div className=\"movies-container\">\n        {movies &&\n          movies.map((movie) => (\n            <div className=\"movie-card\" key={movie.id}>\n              <img\n                src={`https://image.tmdb.org/t/p/w200/${movie.poster_path}`}\n                alt=\"movie poster\"\n              />\n              <div className=\"movie-card-text-overlay\">\n                {/* <p>{movie.overview}</p> */}\n                <h4>{movie.title}</h4>\n\n                <div className=\"movie-card-overlay-btns\">\n                  <ScrollDialog item={movie} user={user} />\n                  <div\n                    onClick={() => {\n                      updateUserMoviesDb(user);\n                      clickHandler(String(movie.id), user);\n                    }}\n                  >\n                    Like\n                  </div>\n                </div>\n              </div>\n            </div>\n          ))}\n      </div>\n    </div>\n  );\n}\n\nexport default PopularMovies;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}