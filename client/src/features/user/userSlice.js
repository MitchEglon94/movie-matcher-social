import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";

const initialState = {
  user: null,
  message: "",
  token: null,
  status: "idle",
};

export const login = createAsyncThunk("auth/fetchUser", async (creds) => {
  // console.log(JSON.stringify(creds));
  const options = {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(creds),
  };
  const response = await fetch(
    "http://127.0.0.1:8080/api/auth/signin",
    options
  );
  const data = await response.json();
  // console.log(data);
  return data;
});

export const signup = createAsyncThunk("auth/addUser", async (creds) => {
  console.log(JSON.stringify(creds));
  const options = {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(creds),
  };
  const response = await fetch(
    "http://127.0.0.1:8080/api/auth/signup",
    options
  );
  const data = await response.json();
  return data;
});

export const userSlice = createSlice({
  name: "user",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    logout: (state) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.user = null;
      state.token = null;
    },
    updateMessage: (state) => {
      state.message = "";
    },
    updateUserMovies: (state, action) => {
      console.log(action.payload);
      if (!state.user.likedMovies) {
        state.user.likedMovies = [action.payload];
      } else if (state.user.likedMovies.indexOf(action.payload) > -1) {
        return;
      } else {
        state.user.likedMovies.push(action.payload);
      }
    },
    updateUserShows: (state, action) => {
      console.log(action.payload);
      if (!state.user.likedTvShows) {
        state.user.likedTvShows = [action.payload];
      } else if (state.user.likedTvShows.indexOf(action.payload) > -1) {
        return;
      } else {
        state.user.likedTvShows.push(action.payload);
      }
    },
    removeUserMovie: (state, action) => {
      console.log(action.payload);
      state.user.likedMovies = state.user.likedMovies.filter(
        (movie) => movie !== action.payload
      );
    },
    removeUserShow: (state, action) => {
      console.log(action.payload);
      state.user.likedTvShows = state.user.likedTvShows.filter(
        (show) => show !== action.payload
      );
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(login.pending, (state) => {
        state.status = "loading";
      })
      .addCase(login.fulfilled, (state, action) => {
        state.status = "idle";
        // console.log(action.payload);
        if (action.payload.accessToken) {
          state.user = action.payload;
        }
      })
      .addCase(signup.pending, (state) => {
        state.status = "loading";
      })
      .addCase(signup.fulfilled, (state, action) => {
        state.status = "idle";
        // console.log(action.meta);
        state.message = action.payload;
      });
  },
});

export const {
  logout,
  updateMessage,
  updateUserMovies,
  updateUserShows,
  removeUserMovie,
  removeUserShow,
} = userSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
// export const selectCount = (state) => state.counter.value;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd = (amount) => (dispatch, getState) => {
//   const currentValue = selectCount(getState());
//   if (currentValue % 2 === 1) {
//     dispatch(incrementByAmount(amount));
//   }
// };

export default userSlice.reducer;
